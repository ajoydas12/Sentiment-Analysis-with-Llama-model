{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceType":"competition","sourceId":93282,"databundleVersionId":11098970},{"sourceType":"modelInstanceVersion","sourceId":104449}],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nmodel_path = '/kaggle/input/llama-3.1/transformers/8b-instruct/2'\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:28:46.134897Z","iopub.execute_input":"2025-02-18T09:28:46.135197Z","iopub.status.idle":"2025-02-18T09:28:46.456181Z","shell.execute_reply.started":"2025-02-18T09:28:46.135174Z","shell.execute_reply":"2025-02-18T09:28:46.455369Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/multi-lingual-sentiment-analysis/sample_submission.csv\n/kaggle/input/multi-lingual-sentiment-analysis/train.csv\n/kaggle/input/multi-lingual-sentiment-analysis/test.csv\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/model.safetensors.index.json\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/model-00003-of-00004.safetensors\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/config.json\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/LICENSE\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/model-00001-of-00004.safetensors\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/README.md\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/USE_POLICY.md\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/tokenizer.json\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/tokenizer_config.json\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/model-00004-of-00004.safetensors\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/special_tokens_map.json\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/.gitattributes\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/model-00002-of-00004.safetensors\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/generation_config.json\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/original/consolidated.00.pth\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/original/params.json\n/kaggle/input/llama-3.1/transformers/8b-instruct/2/original/tokenizer.model\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"!pip install -q -U torch --index-url https://download.pytorch.org/whl/cu117\n!pip install -q -U -i https://pypi.org/simple/ bitsandbytes\n!pip install -q -U transformers\n!pip install -q -U accelerate\n!pip install -q -U datasets\n!pip install -q -U trl\n!pip install -q -U peft","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:28:46.525988Z","iopub.execute_input":"2025-02-18T09:28:46.526393Z","iopub.status.idle":"2025-02-18T09:29:27.784353Z","shell.execute_reply.started":"2025-02-18T09:28:46.526372Z","shell.execute_reply":"2025-02-18T09:29:27.783215Z"}},"outputs":[{"name":"stdout","text":"\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m69.7/69.7 MB\u001b[0m \u001b[31m25.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.0/44.0 kB\u001b[0m \u001b[31m1.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.0/10.0 MB\u001b[0m \u001b[31m70.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m342.1/342.1 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m484.9/484.9 kB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mta \u001b[36m0:00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m318.3/318.3 kB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25h","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import os\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\"\nos.environ[\"TOKENIZERS_PARALLELISM\"] = \"true\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:29:27.786027Z","iopub.execute_input":"2025-02-18T09:29:27.786362Z","iopub.status.idle":"2025-02-18T09:29:27.790416Z","shell.execute_reply.started":"2025-02-18T09:29:27.786332Z","shell.execute_reply":"2025-02-18T09:29:27.789613Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"pd.set_option('display.max_colwidth', None)  # Show full width of each column","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:29:27.792128Z","iopub.execute_input":"2025-02-18T09:29:27.792342Z","iopub.status.idle":"2025-02-18T09:29:27.821795Z","shell.execute_reply.started":"2025-02-18T09:29:27.792325Z","shell.execute_reply":"2025-02-18T09:29:27.821005Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"!nvidia-smi\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T02:16:11.372156Z","iopub.execute_input":"2025-02-18T02:16:11.372462Z","iopub.status.idle":"2025-02-18T02:16:11.607139Z","shell.execute_reply.started":"2025-02-18T02:16:11.372434Z","shell.execute_reply":"2025-02-18T02:16:11.606101Z"}},"outputs":[{"name":"stdout","text":"Tue Feb 18 02:16:11 2025       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 560.35.03              Driver Version: 560.35.03      CUDA Version: 12.6     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\n| N/A   30C    P8              9W /   70W |       1MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n|   1  Tesla T4                       Off |   00000000:00:05.0 Off |                    0 |\n| N/A   35C    P8             10W /   70W |       1MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n                                                                                         \n+-----------------------------------------------------------------------------------------+\n| Processes:                                                                              |\n|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n|        ID   ID                                                               Usage      |\n|=========================================================================================|\n|  No running processes found                                                             |\n+-----------------------------------------------------------------------------------------+\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport datetime as dt\nimport re\nimport os\nfrom tqdm import tqdm\nimport bitsandbytes as bnb\nimport torch\nimport torch.nn as nn\nimport transformers\nfrom datasets import Dataset\nfrom peft import LoraConfig, PeftConfig\nfrom trl import SFTTrainer\nfrom trl import setup_chat_format\nfrom transformers import (AutoConfig,\n                          AutoModelForCausalLM, \n                          AutoTokenizer,\n                          LlamaForCausalLM, \n                          LlamaTokenizer,\n                          BitsAndBytesConfig, \n                          TrainingArguments, \n                          pipeline, \n                          logging)\nfrom sklearn.metrics import (accuracy_score, \n                             classification_report, \n                             confusion_matrix)\nfrom sklearn.model_selection import train_test_split","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:29:27.822902Z","iopub.execute_input":"2025-02-18T09:29:27.823120Z","iopub.status.idle":"2025-02-18T09:30:05.468845Z","shell.execute_reply.started":"2025-02-18T09:29:27.823102Z","shell.execute_reply":"2025-02-18T09:30:05.468186Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"print(f\"pytorch version {torch.__version__}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:30:05.469625Z","iopub.execute_input":"2025-02-18T09:30:05.469852Z","iopub.status.idle":"2025-02-18T09:30:05.474032Z","shell.execute_reply.started":"2025-02-18T09:30:05.469833Z","shell.execute_reply":"2025-02-18T09:30:05.473406Z"}},"outputs":[{"name":"stdout","text":"pytorch version 2.5.1+cu121\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"working on {device}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:30:05.474856Z","iopub.execute_input":"2025-02-18T09:30:05.475183Z","iopub.status.idle":"2025-02-18T09:30:05.543416Z","shell.execute_reply.started":"2025-02-18T09:30:05.475153Z","shell.execute_reply":"2025-02-18T09:30:05.542779Z"}},"outputs":[{"name":"stdout","text":"working on cuda:0\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"train_data = pd.read_csv(\"/kaggle/input/multi-lingual-sentiment-analysis/train.csv\")\ntest_data = pd.read_csv('/kaggle/input/multi-lingual-sentiment-analysis/test.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:30:05.544144Z","iopub.execute_input":"2025-02-18T09:30:05.544395Z","iopub.status.idle":"2025-02-18T09:30:05.599433Z","shell.execute_reply.started":"2025-02-18T09:30:05.544366Z","shell.execute_reply":"2025-02-18T09:30:05.598794Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"sample = pd.read_csv(\"/kaggle/input/multi-lingual-sentiment-analysis/sample_submission.csv\")\nsample.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T02:16:36.953992Z","iopub.execute_input":"2025-02-18T02:16:36.954207Z","iopub.status.idle":"2025-02-18T02:16:36.978321Z","shell.execute_reply.started":"2025-02-18T02:16:36.954190Z","shell.execute_reply":"2025-02-18T02:16:36.977747Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"   ID     label\n0   1  Positive\n1   2  Positive\n2   3  Positive\n3   4  Positive\n4   5  Positive","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Positive</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"train_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:30:52.063645Z","iopub.execute_input":"2025-02-18T09:30:52.063962Z","iopub.status.idle":"2025-02-18T09:30:52.092223Z","shell.execute_reply.started":"2025-02-18T09:30:52.063934Z","shell.execute_reply":"2025-02-18T09:30:52.091593Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   ID  \\\n0   1   \n1   2   \n2   3   \n3   4   \n4   5   \n\n                                                                                                                                                                                                                 sentence  \\\n0  কর্মীদের ভাল আচরণ এবং খাবারের পাশাপাশি পানীয় (ককটেল এবং মকটেল) সহ একটি অনন্য জায়গা খুবই ভাল। প্রায়ই একটি সরাসরি সঙ্গীত পরিবেশনের সাথে এমন পরিবেশ তৈরী করে যে একজন দিন এবং সন্ধ্যা উভয় সময়েই জায়গাটি উপভোগ করতে পারে।   \n1                                                                                                     ગોદરેજ સેન્ટ્રલ એસીમાં તેના કન્ડેન્સર પર 2 વર્ષની વોરંટી આપે છે જે બજારમાં મહત્તમ છે અને તેથી વિશ્વાસ પરિબળ વધે છે.   \n2                                                                    கதைக்களம் பிடித்திருந்தது, அனைத்து நடிகர்களும் அவர்களுடைய நடிப்பும் சிறப்பாக இருந்தன. ஜாலியாக இருந்தது அதே நேரத்தில் உணர்ச்சிகளின் கலவையாக இருந்தது.   \n3                                                                                                                                         ਵੌਇਸ-ਓਵਰ ਬਹੁਤ ਵਧੀਆ ਸੀ ਅਤੇ ਕਹਾਣੀ ਦੀ ਸੀਮਾ ਵਿੱਚ ਇਸਦਾ ਪਾਲਣ ਕਰਨਾ ਆਸਾਨ ਅਤੇ ਦਿਲਚਸਪ ਸੀ।   \n4                                                                                                           जुथानि थाखाय जायगा गैया। गुबुन मुवा सोग्रा जायगायावनो सोफानांगौ। फेन्दा फिथाइ एबा जान्जिखौ दोननो गान्दु गैया।   \n\n      label language  \n0  Positive       bn  \n1  Positive       gu  \n2  Positive       ta  \n3  Positive       pa  \n4  Negative       bd  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>sentence</th>\n      <th>label</th>\n      <th>language</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>কর্মীদের ভাল আচরণ এবং খাবারের পাশাপাশি পানীয় (ককটেল এবং মকটেল) সহ একটি অনন্য জায়গা খুবই ভাল। প্রায়ই একটি সরাসরি সঙ্গীত পরিবেশনের সাথে এমন পরিবেশ তৈরী করে যে একজন দিন এবং সন্ধ্যা উভয় সময়েই জায়গাটি উপভোগ করতে পারে।</td>\n      <td>Positive</td>\n      <td>bn</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>ગોદરેજ સેન્ટ્રલ એસીમાં તેના કન્ડેન્સર પર 2 વર્ષની વોરંટી આપે છે જે બજારમાં મહત્તમ છે અને તેથી વિશ્વાસ પરિબળ વધે છે.</td>\n      <td>Positive</td>\n      <td>gu</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>கதைக்களம் பிடித்திருந்தது, அனைத்து நடிகர்களும் அவர்களுடைய நடிப்பும் சிறப்பாக இருந்தன. ஜாலியாக இருந்தது அதே நேரத்தில் உணர்ச்சிகளின் கலவையாக இருந்தது.</td>\n      <td>Positive</td>\n      <td>ta</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>ਵੌਇਸ-ਓਵਰ ਬਹੁਤ ਵਧੀਆ ਸੀ ਅਤੇ ਕਹਾਣੀ ਦੀ ਸੀਮਾ ਵਿੱਚ ਇਸਦਾ ਪਾਲਣ ਕਰਨਾ ਆਸਾਨ ਅਤੇ ਦਿਲਚਸਪ ਸੀ।</td>\n      <td>Positive</td>\n      <td>pa</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>जुथानि थाखाय जायगा गैया। गुबुन मुवा सोग्रा जायगायावनो सोफानांगौ। फेन्दा फिथाइ एबा जान्जिखौ दोननो गान्दु गैया।</td>\n      <td>Negative</td>\n      <td>bd</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"# Split the training data into train and validation sets\ntrain_df, val_df = train_test_split(train_data, test_size=0.2, random_state=42, stratify=train_data['label'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:30:54.615373Z","iopub.execute_input":"2025-02-18T09:30:54.615705Z","iopub.status.idle":"2025-02-18T09:30:54.642141Z","shell.execute_reply.started":"2025-02-18T09:30:54.615679Z","shell.execute_reply":"2025-02-18T09:30:54.641488Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set plot style\nsns.set(style=\"whitegrid\")\n\n# Count labels in train and val sets\ntrain_counts = train_df['label'].value_counts().sort_index()\nval_counts = val_df['label'].value_counts().sort_index()\n\n# Create a DataFrame for visualization\ndistribution_df = pd.DataFrame({\n    'Sentiment': train_counts.index,\n    'Train': train_counts.values,\n    'Validation': val_counts.values\n})\n\n# Plot\nplt.figure(figsize=(8, 5))\ndistribution_df.set_index('Sentiment').plot(kind='bar', width=0.2, alpha=0.80)\n\nplt.title(\"Sentiment Distribution in Train & Validation Sets\")\nplt.xlabel(\"Sentiment Labels\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=0)\nplt.legend(title=\"Dataset\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T18:39:20.989941Z","iopub.execute_input":"2025-02-17T18:39:20.990293Z","iopub.status.idle":"2025-02-17T18:39:21.300811Z","shell.execute_reply.started":"2025-02-17T18:39:20.990262Z","shell.execute_reply":"2025-02-17T18:39:21.299940Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"def generate_prompt(data):\n    return f\"\"\"\n    Analyse the sentiment of the review enclosed in square brackets.\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\n\n    [{data[\"sentence\"]}] = {data[\"label\"]}\n    \"\"\".strip()\ndef generate_test_prompt(data):\n    return f\"\"\"\n    Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\n    sentiment label \"positive\" or \"negative\"\n    [{data[\"sentence\"]}] =  \"\"\".strip()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:30:59.145704Z","iopub.execute_input":"2025-02-18T09:30:59.146020Z","iopub.status.idle":"2025-02-18T09:30:59.150095Z","shell.execute_reply.started":"2025-02-18T09:30:59.145998Z","shell.execute_reply":"2025-02-18T09:30:59.149329Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"train_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:31:00.069775Z","iopub.execute_input":"2025-02-18T09:31:00.070096Z","iopub.status.idle":"2025-02-18T09:31:00.078917Z","shell.execute_reply.started":"2025-02-18T09:31:00.070073Z","shell.execute_reply":"2025-02-18T09:31:00.078003Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"      ID  \\\n122  123   \n148  149   \n83    84   \n62    63   \n580  581   \n\n                                                                                                                                                                                                                                                   sentence  \\\n122                                                                                                        প্ৰতিগৰাকী মাতৃ-পুত্ৰৰ যুটিয়ে সহজে ইলা আৰু ভিভানৰ চৰিত্ৰৰ সৈতে সম্পৰ্কিত হ'ব পাৰে। কাজল আৰু ৰিদ্ধি সেনে চৰিত্ৰবোৰক যুক্তিযুক্ততা প্ৰদান কৰিছিল।   \n148                               'এটি মানের দিক থেকে খুবই বাজে: ধাতুতে কয়েক দিনের মধ্যে মরিচা পড়তে শুরু করে এবং চেয়ারটি এক বা দুই দিন পরে অত্যন্ত চিকচিক করে। প্রোডাক্টটি মোটেই টেকসই নয়, আমি ভয় পাচ্ছি যে এটি ব্যবহারের কয়েক মাসের মধ্যে ভেঙে যাবে। ''   \n83   এটিতে সমস্ত পুষ্টি রয়েছে, তাছাড়াও এটি অত্যন্ত সুস্বাদু এবং সহজে হজমযোগ্য। এটি একটি সুস্থ ইমিউন সিস্টেমকে সমর্থন করে। এটিতে সমস্ত প্রয়োজনীয় ভিটামিন, খনিজ এবং অ্যান্টিঅক্সিডেন্ট রয়েছে যা পোষা প্রাণীর স্বাস্থ্য এবং জীবনীশক্তি বাড়াতে সাহায্য করে।   \n62                                                                      मैंने हाल ही में सोनोडायन का होम थिएटर सिस्टम खरीदा। जब मैं सब कुछ चेक कर रहा था तो मैं वॉयस कंट्रोल के बारे में भूल गया; अगर इसमें वॉयस कंट्रोल होता तो यह सबसे अच्छा स्पीकर होता।   \n580                                                                                 నా స్నేహితుల టైమ్‌లైన్ ఫోటోల విభాగంలో నేను ఎంచుకున్న ఫోటోలను చూడలేకపోయాను. ఇది బహిరంగంగా పంచుకోబడినట్లుగా ధృవీకరించిన తరువాత కూడా ఇది నలుపు లేదా ఖాళీగా చూపించబడుతుంది.   \n\n        label language  \n122  Positive       as  \n148  Negative       bn  \n83   Positive       bn  \n62   Negative       hi  \n580  Negative       te  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>sentence</th>\n      <th>label</th>\n      <th>language</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>122</th>\n      <td>123</td>\n      <td>প্ৰতিগৰাকী মাতৃ-পুত্ৰৰ যুটিয়ে সহজে ইলা আৰু ভিভানৰ চৰিত্ৰৰ সৈতে সম্পৰ্কিত হ'ব পাৰে। কাজল আৰু ৰিদ্ধি সেনে চৰিত্ৰবোৰক যুক্তিযুক্ততা প্ৰদান কৰিছিল।</td>\n      <td>Positive</td>\n      <td>as</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>149</td>\n      <td>'এটি মানের দিক থেকে খুবই বাজে: ধাতুতে কয়েক দিনের মধ্যে মরিচা পড়তে শুরু করে এবং চেয়ারটি এক বা দুই দিন পরে অত্যন্ত চিকচিক করে। প্রোডাক্টটি মোটেই টেকসই নয়, আমি ভয় পাচ্ছি যে এটি ব্যবহারের কয়েক মাসের মধ্যে ভেঙে যাবে। ''</td>\n      <td>Negative</td>\n      <td>bn</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>84</td>\n      <td>এটিতে সমস্ত পুষ্টি রয়েছে, তাছাড়াও এটি অত্যন্ত সুস্বাদু এবং সহজে হজমযোগ্য। এটি একটি সুস্থ ইমিউন সিস্টেমকে সমর্থন করে। এটিতে সমস্ত প্রয়োজনীয় ভিটামিন, খনিজ এবং অ্যান্টিঅক্সিডেন্ট রয়েছে যা পোষা প্রাণীর স্বাস্থ্য এবং জীবনীশক্তি বাড়াতে সাহায্য করে।</td>\n      <td>Positive</td>\n      <td>bn</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>63</td>\n      <td>मैंने हाल ही में सोनोडायन का होम थिएटर सिस्टम खरीदा। जब मैं सब कुछ चेक कर रहा था तो मैं वॉयस कंट्रोल के बारे में भूल गया; अगर इसमें वॉयस कंट्रोल होता तो यह सबसे अच्छा स्पीकर होता।</td>\n      <td>Negative</td>\n      <td>hi</td>\n    </tr>\n    <tr>\n      <th>580</th>\n      <td>581</td>\n      <td>నా స్నేహితుల టైమ్‌లైన్ ఫోటోల విభాగంలో నేను ఎంచుకున్న ఫోటోలను చూడలేకపోయాను. ఇది బహిరంగంగా పంచుకోబడినట్లుగా ధృవీకరించిన తరువాత కూడా ఇది నలుపు లేదా ఖాళీగా చూపించబడుతుంది.</td>\n      <td>Negative</td>\n      <td>te</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"# Generate the full prompt (input) and retain sentiment as a separate column\ntrain_df['text'] = train_df.apply(generate_prompt, axis=1)\nval_df['text'] = val_df.apply(generate_prompt, axis=1)\n\n# Select the prompt (review) and sentiment for training and evaluation\nX_train = train_df[['text', 'label']]\nX_eval = val_df[['text', 'label']]\n\n# For X_test, generate the test prompt without sentiment and keep it as a DataFrame\ntest_data['text'] = test_data.apply(generate_test_prompt, axis=1)\nX_test = test_data[['text']]\n\n# Now convert the DataFrame to a dataset\ntrain_data = Dataset.from_pandas(X_train)\neval_data = Dataset.from_pandas(X_eval)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:31:03.147028Z","iopub.execute_input":"2025-02-18T09:31:03.147338Z","iopub.status.idle":"2025-02-18T09:31:03.195396Z","shell.execute_reply.started":"2025-02-18T09:31:03.147312Z","shell.execute_reply":"2025-02-18T09:31:03.194621Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"X_eval","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T03:47:50.733098Z","iopub.execute_input":"2025-02-18T03:47:50.733531Z","iopub.status.idle":"2025-02-18T03:47:50.745636Z","shell.execute_reply.started":"2025-02-18T03:47:50.733492Z","shell.execute_reply":"2025-02-18T03:47:50.744710Z"}},"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  text  \\\n548                                                                                                                                              Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [તે વાસ્તવવાદ અને અતિવાસ્તવવાદમાં પથરાયેલી એક પ્રાયોગિક અંધકારમય દંતકથા છે. અને તે આ પાસું છે જે આ પ્રકારની એક અનોખી ફિલ્મ બનાવે છે.] = Positive   \n626                                                                                                                     Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [ماڈل ٹی وی ایس اسپورٹ ماڈل کے لیے، انجن میں پاور اور ریفائنمنٹ کی کمی تھی اور کچھ خریداروں کے مطابق ٹیوب لیس ٹائر اور فرنٹ ڈسک بریک جیسی خصوصیات کی کمی تھی۔] = Negative   \n942                                                                                                                        Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [ಜಾರಾ ಅವರ ಕೈಚೀಲವು ಅದರ ಗುಣಮಟ್ಟ ಮತ್ತು ಬಾಳಿಕೆಗೆ ಹೆಸರುವಾಸಿಯಾಗಿದೆ. ಇದರ ಚರ್ಮವು ಮೃದು ಮತ್ತು ಬಲವಾದದ್ದು. ಉತ್ತಮ ಗುಣಮಟ್ಟದ ಜಿಪ್‌ಗಳೊಂದಿಗೆ ಇದು ಬಹು ಪಾಕೆಟ್‌ಗಳನ್ನು ಹೊಂದಿದೆ.] = Positive   \n223                                                                        Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [পাৰ্কিংৰ সুবিধা সম্পৰ্কে কিছু সমস্যা আছে কিয়নো হোটেলখন মূল পথত অৱস্থিত আৰু তেওঁলোকৰ নিজা কোনো পাৰ্কিঙৰ স্থান নাই। লগতে, কেতিয়াবা বিলিং ভুল হয় আৰু মেনুত থকা মূল্য আৰু বিলত উল্লেখ কৰা মূল্যবোৰ নিমিলে।] = Negative   \n513                                                                                                                                                                                                              Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [\"ಅವರು ದೊಡ್ಡ ಫ್ಲೀಟ್ ಅನ್ನು ಹೊಂದಿರುವುದರಿಂದ ಬಹುಶಃ ಅತ್ಯಂತ ಕೈಗೆಟುಕುವದು. \"] = Positive   \n..                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ...   \n255                                                                                                                                                                  Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [ಉತ್ತಮ ದಕ್ಷತೆಗಾಗಿ ವಿನ್ಯಾಸಗೊಳಿಸಲಾದ ಮೋಟಾರು ಬಲವಂತದ ಉಸಿರಾಟದೊಂದಿಗೆ ಕೊನೆಗೊಳ್ಳುತ್ತದೆ. 1ಹೆಚ್. ಪಿ ಮೋಟಾರು ಸಹಾಯ ಮಾಡುತ್ತಿಲ್ಲ] = Negative   \n279  Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [अलेक्झांडर स्कार्सगार्डने एक अभूतपूर्व मुख्य भूमिका साकारली आहे, जी काहीच्या काही शारीरिकतेने भरलेली आणि स्पष्ट दिसणारी वेदना आणि आघात यांचा समतोल आहे. रॉबर्ट एगर्सचे दिग्दर्शन उत्कृष्ट आहे, मारमारीचे समाधानकारक सीन्स, सहज ॲक्शन आणि काही स्वप्नवत प्रतिमांनी परिपूर्ण आहे.] = Positive   \n72                                                                                                                                  Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [آئی کال (iKall) کے ٹاور اسپیکر وائی فائی کے ذریعے مربوط ہوتے ہیں۔ لہذا پیچيدہ تاروں، ناکام بلوٹوتھ، کیبلز کی تلاش وغیرہ کی کوئی پریشانی نہیں ہے۔] = Positive   \n3                                                                                                                                                                                                    Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [ਵੌਇਸ-ਓਵਰ ਬਹੁਤ ਵਧੀਆ ਸੀ ਅਤੇ ਕਹਾਣੀ ਦੀ ਸੀਮਾ ਵਿੱਚ ਇਸਦਾ ਪਾਲਣ ਕਰਨਾ ਆਸਾਨ ਅਤੇ ਦਿਲਚਸਪ ਸੀ।] = Positive   \n917                                                                                                                                             Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [CGର ସିଲିଂ ଫ୍ୟାନଗୁଡ଼ିକୁ ସୁନ୍ଦର ଏବଂ ଆକର୍ଷଣୀୟ ଶୈଳୀ ସହିତ ଡିଜାଇନ୍ କରାଯାଇଛି | ଛୋଟ ଘରେ ମଧ୍ୟ ସେମାନେ ମହାନତା ଏବଂ ଅତ୍ୟାଧୁନିକତାର ଅନୁଭବ ଦିଅନ୍ତି |] = Positive   \n\n        label  \n548  Positive  \n626  Negative  \n942  Positive  \n223  Negative  \n513  Positive  \n..        ...  \n255  Negative  \n279  Positive  \n72   Positive  \n3    Positive  \n917  Positive  \n\n[200 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>548</th>\n      <td>Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [તે વાસ્તવવાદ અને અતિવાસ્તવવાદમાં પથરાયેલી એક પ્રાયોગિક અંધકારમય દંતકથા છે. અને તે આ પાસું છે જે આ પ્રકારની એક અનોખી ફિલ્મ બનાવે છે.] = Positive</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>626</th>\n      <td>Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [ماڈل ٹی وی ایس اسپورٹ ماڈل کے لیے، انجن میں پاور اور ریفائنمنٹ کی کمی تھی اور کچھ خریداروں کے مطابق ٹیوب لیس ٹائر اور فرنٹ ڈسک بریک جیسی خصوصیات کی کمی تھی۔] = Negative</td>\n      <td>Negative</td>\n    </tr>\n    <tr>\n      <th>942</th>\n      <td>Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [ಜಾರಾ ಅವರ ಕೈಚೀಲವು ಅದರ ಗುಣಮಟ್ಟ ಮತ್ತು ಬಾಳಿಕೆಗೆ ಹೆಸರುವಾಸಿಯಾಗಿದೆ. ಇದರ ಚರ್ಮವು ಮೃದು ಮತ್ತು ಬಲವಾದದ್ದು. ಉತ್ತಮ ಗುಣಮಟ್ಟದ ಜಿಪ್‌ಗಳೊಂದಿಗೆ ಇದು ಬಹು ಪಾಕೆಟ್‌ಗಳನ್ನು ಹೊಂದಿದೆ.] = Positive</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>223</th>\n      <td>Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [পাৰ্কিংৰ সুবিধা সম্পৰ্কে কিছু সমস্যা আছে কিয়নো হোটেলখন মূল পথত অৱস্থিত আৰু তেওঁলোকৰ নিজা কোনো পাৰ্কিঙৰ স্থান নাই। লগতে, কেতিয়াবা বিলিং ভুল হয় আৰু মেনুত থকা মূল্য আৰু বিলত উল্লেখ কৰা মূল্যবোৰ নিমিলে।] = Negative</td>\n      <td>Negative</td>\n    </tr>\n    <tr>\n      <th>513</th>\n      <td>Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [\"ಅವರು ದೊಡ್ಡ ಫ್ಲೀಟ್ ಅನ್ನು ಹೊಂದಿರುವುದರಿಂದ ಬಹುಶಃ ಅತ್ಯಂತ ಕೈಗೆಟುಕುವದು. \"] = Positive</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>255</th>\n      <td>Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [ಉತ್ತಮ ದಕ್ಷತೆಗಾಗಿ ವಿನ್ಯಾಸಗೊಳಿಸಲಾದ ಮೋಟಾರು ಬಲವಂತದ ಉಸಿರಾಟದೊಂದಿಗೆ ಕೊನೆಗೊಳ್ಳುತ್ತದೆ. 1ಹೆಚ್. ಪಿ ಮೋಟಾರು ಸಹಾಯ ಮಾಡುತ್ತಿಲ್ಲ] = Negative</td>\n      <td>Negative</td>\n    </tr>\n    <tr>\n      <th>279</th>\n      <td>Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [अलेक्झांडर स्कार्सगार्डने एक अभूतपूर्व मुख्य भूमिका साकारली आहे, जी काहीच्या काही शारीरिकतेने भरलेली आणि स्पष्ट दिसणारी वेदना आणि आघात यांचा समतोल आहे. रॉबर्ट एगर्सचे दिग्दर्शन उत्कृष्ट आहे, मारमारीचे समाधानकारक सीन्स, सहज ॲक्शन आणि काही स्वप्नवत प्रतिमांनी परिपूर्ण आहे.] = Positive</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [آئی کال (iKall) کے ٹاور اسپیکر وائی فائی کے ذریعے مربوط ہوتے ہیں۔ لہذا پیچيدہ تاروں، ناکام بلوٹوتھ، کیبلز کی تلاش وغیرہ کی کوئی پریشانی نہیں ہے۔] = Positive</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [ਵੌਇਸ-ਓਵਰ ਬਹੁਤ ਵਧੀਆ ਸੀ ਅਤੇ ਕਹਾਣੀ ਦੀ ਸੀਮਾ ਵਿੱਚ ਇਸਦਾ ਪਾਲਣ ਕਰਨਾ ਆਸਾਨ ਅਤੇ ਦਿਲਚਸਪ ਸੀ।] = Positive</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>917</th>\n      <td>Analyse the sentiment of the review enclosed in square brackets.\\n    determine if it is positive or negative and return answer as the corresponding sentiment label \"positive\" or \"negative\"\\n\\n    [CGର ସିଲିଂ ଫ୍ୟାନଗୁଡ଼ିକୁ ସୁନ୍ଦର ଏବଂ ଆକର୍ଷଣୀୟ ଶୈଳୀ ସହିତ ଡିଜାଇନ୍ କରାଯାଇଛି | ଛୋଟ ଘରେ ମଧ୍ୟ ସେମାନେ ମହାନତା ଏବଂ ଅତ୍ୟାଧୁନିକତାର ଅନୁଭବ ଦିଅନ୍ତି |] = Positive</td>\n      <td>Positive</td>\n    </tr>\n  </tbody>\n</table>\n<p>200 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":73},{"cell_type":"code","source":"X_eval_test = X_eval[['text']]\ny_eval_true = X_eval.label","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:31:09.149494Z","iopub.execute_input":"2025-02-18T09:31:09.149821Z","iopub.status.idle":"2025-02-18T09:31:09.154479Z","shell.execute_reply.started":"2025-02-18T09:31:09.149797Z","shell.execute_reply":"2025-02-18T09:31:09.153610Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"print(len(X_eval_test))\nprint(len(y_eval_true))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:31:10.098418Z","iopub.execute_input":"2025-02-18T09:31:10.098763Z","iopub.status.idle":"2025-02-18T09:31:10.103732Z","shell.execute_reply.started":"2025-02-18T09:31:10.098727Z","shell.execute_reply":"2025-02-18T09:31:10.102873Z"}},"outputs":[{"name":"stdout","text":"200\n200\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"test_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T03:48:07.472604Z","iopub.execute_input":"2025-02-18T03:48:07.472909Z","iopub.status.idle":"2025-02-18T03:48:07.482739Z","shell.execute_reply.started":"2025-02-18T03:48:07.472887Z","shell.execute_reply":"2025-02-18T03:48:07.481952Z"}},"outputs":[{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"   ID  \\\n0   1   \n1   2   \n2   3   \n3   4   \n4   5   \n\n                                                                                                                                                                                                                                 sentence  \\\n0                                                                                                                                                                                                         1120 mAh, ਓਵਰਚਾਰਜਿੰਗ ਦੀ ਸੁਰੱਖਿਆ   \n1                                                                                                                                                                   તે સઘન મોઇશ્ચરાઇઝિંગ પ્રદાન કરે છે અને સરસ સ્વર્ગીય ફળની સુગંધ આપે છે   \n2                                                                                                                                                                                                           1120 ಎಂಎಎಚ್, ಮಿತಿಮೀರಿದ ರಕ್ಷಣೆ   \n3                            ভাৰতত নিৰ্মিত সৰ্বশ্ৰেষ্ঠ পাৰফিউম ব্ৰেণ্ডবোৰৰ এটা। এইটো এটা নিশ্চিতভাৱে পৰীক্ষণীয় সামগ্ৰী। মই বিভিন্ন স্তৰৰ কমলাৰ ফুল, আঙুৰ, কস্তুৰী আৰু জেচমিনৰ গোন্ধ ভাল পাওঁ। সঁচাকৈয়ে আপোনাক গোটেই দিনটো সতেজ কৰি ৰাখে।   \n4  میں نے حال ہی میں \"انفولڈ\" سے ایک ٹیمپلیٹ خریدا ہے لیکن میں اپنے ترمیمی صفحہ تک رسائی یا دیکھنے سے قاصر ہوں۔ یہ کافی پریشان کن ہے، بینک اکاؤنٹ سے رقم کاٹی جا رہی ہے اور ٹیمپلیٹ دکھا رہا ہے، لیکن ترمیم کے موڈ میں ظاہر نہیں ہوتا ہے۔   \n\n  language  \\\n0       pa   \n1       gu   \n2       kn   \n3       as   \n4       ur   \n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              prompt  \\\n0                                                                                                                                                                                                         Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [1120 mAh, ਓਵਰਚਾਰਜਿੰਗ ਦੀ ਸੁਰੱਖਿਆ] =   \n1                                                                                                                                                                   Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [તે સઘન મોઇશ્ચરાઇઝિંગ પ્રદાન કરે છે અને સરસ સ્વર્ગીય ફળની સુગંધ આપે છે] =   \n2                                                                                                                                                                                                           Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [1120 ಎಂಎಎಚ್, ಮಿತಿಮೀರಿದ ರಕ್ಷಣೆ] =   \n3                            Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [ভাৰতত নিৰ্মিত সৰ্বশ্ৰেষ্ঠ পাৰফিউম ব্ৰেণ্ডবোৰৰ এটা। এইটো এটা নিশ্চিতভাৱে পৰীক্ষণীয় সামগ্ৰী। মই বিভিন্ন স্তৰৰ কমলাৰ ফুল, আঙুৰ, কস্তুৰী আৰু জেচমিনৰ গোন্ধ ভাল পাওঁ। সঁচাকৈয়ে আপোনাক গোটেই দিনটো সতেজ কৰি ৰাখে।] =   \n4  Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [میں نے حال ہی میں \"انفولڈ\" سے ایک ٹیمپلیٹ خریدا ہے لیکن میں اپنے ترمیمی صفحہ تک رسائی یا دیکھنے سے قاصر ہوں۔ یہ کافی پریشان کن ہے، بینک اکاؤنٹ سے رقم کاٹی جا رہی ہے اور ٹیمپلیٹ دکھا رہا ہے، لیکن ترمیم کے موڈ میں ظاہر نہیں ہوتا ہے۔] =   \n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                text  \n0                                                                                                                                                                                                         Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [1120 mAh, ਓਵਰਚਾਰਜਿੰਗ ਦੀ ਸੁਰੱਖਿਆ] =  \n1                                                                                                                                                                   Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [તે સઘન મોઇશ્ચરાઇઝિંગ પ્રદાન કરે છે અને સરસ સ્વર્ગીય ફળની સુગંધ આપે છે] =  \n2                                                                                                                                                                                                           Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [1120 ಎಂಎಎಚ್, ಮಿತಿಮೀರಿದ ರಕ್ಷಣೆ] =  \n3                            Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [ভাৰতত নিৰ্মিত সৰ্বশ্ৰেষ্ঠ পাৰফিউম ব্ৰেণ্ডবোৰৰ এটা। এইটো এটা নিশ্চিতভাৱে পৰীক্ষণীয় সামগ্ৰী। মই বিভিন্ন স্তৰৰ কমলাৰ ফুল, আঙুৰ, কস্তুৰী আৰু জেচমিনৰ গোন্ধ ভাল পাওঁ। সঁচাকৈয়ে আপোনাক গোটেই দিনটো সতেজ কৰি ৰাখে।] =  \n4  Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [میں نے حال ہی میں \"انفولڈ\" سے ایک ٹیمپلیٹ خریدا ہے لیکن میں اپنے ترمیمی صفحہ تک رسائی یا دیکھنے سے قاصر ہوں۔ یہ کافی پریشان کن ہے، بینک اکاؤنٹ سے رقم کاٹی جا رہی ہے اور ٹیمپلیٹ دکھا رہا ہے، لیکن ترمیم کے موڈ میں ظاہر نہیں ہوتا ہے۔] =  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>sentence</th>\n      <th>language</th>\n      <th>prompt</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1120 mAh, ਓਵਰਚਾਰਜਿੰਗ ਦੀ ਸੁਰੱਖਿਆ</td>\n      <td>pa</td>\n      <td>Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [1120 mAh, ਓਵਰਚਾਰਜਿੰਗ ਦੀ ਸੁਰੱਖਿਆ] =</td>\n      <td>Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [1120 mAh, ਓਵਰਚਾਰਜਿੰਗ ਦੀ ਸੁਰੱਖਿਆ] =</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>તે સઘન મોઇશ્ચરાઇઝિંગ પ્રદાન કરે છે અને સરસ સ્વર્ગીય ફળની સુગંધ આપે છે</td>\n      <td>gu</td>\n      <td>Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [તે સઘન મોઇશ્ચરાઇઝિંગ પ્રદાન કરે છે અને સરસ સ્વર્ગીય ફળની સુગંધ આપે છે] =</td>\n      <td>Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [તે સઘન મોઇશ્ચરાઇઝિંગ પ્રદાન કરે છે અને સરસ સ્વર્ગીય ફળની સુગંધ આપે છે] =</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1120 ಎಂಎಎಚ್, ಮಿತಿಮೀರಿದ ರಕ್ಷಣೆ</td>\n      <td>kn</td>\n      <td>Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [1120 ಎಂಎಎಚ್, ಮಿತಿಮೀರಿದ ರಕ್ಷಣೆ] =</td>\n      <td>Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [1120 ಎಂಎಎಚ್, ಮಿತಿಮೀರಿದ ರಕ್ಷಣೆ] =</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>ভাৰতত নিৰ্মিত সৰ্বশ্ৰেষ্ঠ পাৰফিউম ব্ৰেণ্ডবোৰৰ এটা। এইটো এটা নিশ্চিতভাৱে পৰীক্ষণীয় সামগ্ৰী। মই বিভিন্ন স্তৰৰ কমলাৰ ফুল, আঙুৰ, কস্তুৰী আৰু জেচমিনৰ গোন্ধ ভাল পাওঁ। সঁচাকৈয়ে আপোনাক গোটেই দিনটো সতেজ কৰি ৰাখে।</td>\n      <td>as</td>\n      <td>Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [ভাৰতত নিৰ্মিত সৰ্বশ্ৰেষ্ঠ পাৰফিউম ব্ৰেণ্ডবোৰৰ এটা। এইটো এটা নিশ্চিতভাৱে পৰীক্ষণীয় সামগ্ৰী। মই বিভিন্ন স্তৰৰ কমলাৰ ফুল, আঙুৰ, কস্তুৰী আৰু জেচমিনৰ গোন্ধ ভাল পাওঁ। সঁচাকৈয়ে আপোনাক গোটেই দিনটো সতেজ কৰি ৰাখে।] =</td>\n      <td>Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [ভাৰতত নিৰ্মিত সৰ্বশ্ৰেষ্ঠ পাৰফিউম ব্ৰেণ্ডবোৰৰ এটা। এইটো এটা নিশ্চিতভাৱে পৰীক্ষণীয় সামগ্ৰী। মই বিভিন্ন স্তৰৰ কমলাৰ ফুল, আঙুৰ, কস্তুৰী আৰু জেচমিনৰ গোন্ধ ভাল পাওঁ। সঁচাকৈয়ে আপোনাক গোটেই দিনটো সতেজ কৰি ৰাখে।] =</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>میں نے حال ہی میں \"انفولڈ\" سے ایک ٹیمپلیٹ خریدا ہے لیکن میں اپنے ترمیمی صفحہ تک رسائی یا دیکھنے سے قاصر ہوں۔ یہ کافی پریشان کن ہے، بینک اکاؤنٹ سے رقم کاٹی جا رہی ہے اور ٹیمپلیٹ دکھا رہا ہے، لیکن ترمیم کے موڈ میں ظاہر نہیں ہوتا ہے۔</td>\n      <td>ur</td>\n      <td>Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [میں نے حال ہی میں \"انفولڈ\" سے ایک ٹیمپلیٹ خریدا ہے لیکن میں اپنے ترمیمی صفحہ تک رسائی یا دیکھنے سے قاصر ہوں۔ یہ کافی پریشان کن ہے، بینک اکاؤنٹ سے رقم کاٹی جا رہی ہے اور ٹیمپلیٹ دکھا رہا ہے، لیکن ترمیم کے موڈ میں ظاہر نہیں ہوتا ہے۔] =</td>\n      <td>Analyse the sentiment of the review enclosed in square brackets, determine if it is positive or negative and return the answer as the corresponding\\n    sentiment label \"positive\" or \"negative\"\\n    [میں نے حال ہی میں \"انفولڈ\" سے ایک ٹیمپلیٹ خریدا ہے لیکن میں اپنے ترمیمی صفحہ تک رسائی یا دیکھنے سے قاصر ہوں۔ یہ کافی پریشان کن ہے، بینک اکاؤنٹ سے رقم کاٹی جا رہی ہے اور ٹیمپلیٹ دکھا رہا ہے، لیکن ترمیم کے موڈ میں ظاہر نہیں ہوتا ہے۔] =</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":75},{"cell_type":"code","source":"X_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T18:39:37.945643Z","iopub.execute_input":"2025-02-17T18:39:37.945926Z","iopub.status.idle":"2025-02-17T18:39:37.950701Z","shell.execute_reply.started":"2025-02-17T18:39:37.945904Z","shell.execute_reply":"2025-02-17T18:39:37.949955Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(800, 2)"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"# def evaluate(y_true, y_pred):\n#     labels = ['Positive', 'Negative']\n#     mapping = {'Positive': 1, 'Negative': 0}\n#     def map_func(x):\n#         return mapping.get(x, 1)\n    \n#     y_true = np.vectorize(map_func)(y_true)\n#     y_pred = np.vectorize(map_func)(y_pred)\n    \n#     # Calculate accuracy\n#     accuracy = accuracy_score(y_true=y_true, y_pred=y_pred)\n#     print(f'Accuracy: {accuracy:.3f}')\n#     # \n#     # Generate accuracy report\n#     unique_labels = set(y_true)  # Get unique labels\n    \n#     for label in unique_labels:\n#         label_indices = [i for i in range(len(y_true)) \n#                          if y_true[i] == label]\n#         label_y_true = [y_true[i] for i in label_indices]\n#         label_y_pred = [y_pred[i] for i in label_indices]\n#         accuracy = accuracy_score(label_y_true, label_y_pred)\n#         print(f'Accuracy for label {label}: {accuracy:.3f}')\n        \n#     # Generate classification report\n#     class_report = classification_report(y_true=y_true, y_pred=y_pred)\n#     print('\\nClassification Report:')\n#     print(class_report)\n    \n#     # Generate confusion matrix\n#     conf_matrix = confusion_matrix(y_true=y_true, y_pred=y_pred, labels=[0, 1])\n#     print('\\nConfusion Matrix:')\n#     print(conf_matrix)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T19:54:44.069437Z","iopub.execute_input":"2025-02-17T19:54:44.069734Z","iopub.status.idle":"2025-02-17T19:54:44.076207Z","shell.execute_reply.started":"2025-02-17T19:54:44.069713Z","shell.execute_reply":"2025-02-17T19:54:44.075207Z"}},"outputs":[],"execution_count":101},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:31:15.805057Z","iopub.execute_input":"2025-02-18T09:31:15.805347Z","iopub.status.idle":"2025-02-18T09:31:15.809005Z","shell.execute_reply.started":"2025-02-18T09:31:15.805324Z","shell.execute_reply":"2025-02-18T09:31:15.808146Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"model_name = \"/kaggle/input/llama-3.1/transformers/8b-instruct/2\"\n\ncompute_dtype = getattr(torch, \"float16\")\n\nbnb_config = BitsAndBytesConfig(\n    load_in_4bit=True, \n    bnb_4bit_quant_type=\"nf4\", \n    bnb_4bit_compute_dtype=compute_dtype,\n    bnb_4bit_use_double_quant=True,\n)\n\nmodel = AutoModelForCausalLM.from_pretrained(\n    model_name,\n    device_map=device,\n    torch_dtype=compute_dtype,\n    quantization_config=bnb_config, \n)\n\nmodel.config.use_cache = False\nmodel.config.pretraining_tp = 1\n\ntokenizer = AutoTokenizer.from_pretrained(model_name, \n                                          trust_remote_code=True,\n                                         )\ntokenizer.pad_token = tokenizer.eos_token\ntokenizer.padding_side = \"right\"\n\ntokenizer.chat_template = None  # Clear the existing chat template\nmodel, tokenizer = setup_chat_format(model, tokenizer)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:31:18.781048Z","iopub.execute_input":"2025-02-18T09:31:18.781362Z","iopub.status.idle":"2025-02-18T09:32:54.906093Z","shell.execute_reply.started":"2025-02-18T09:31:18.781335Z","shell.execute_reply":"2025-02-18T09:32:54.905130Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"472bd05459284b578c89f85537e728f9"}},"metadata":{}},{"name":"stderr","text":"The new embeddings will be initialized from a multivariate normal distribution that has old embeddings' mean and covariance. As described in this article: https://nlp.stanford.edu/~johnhew/vocab-expansion.html. To disable this, use `mean_resizing=False`\nThe new lm_head weights will be initialized from a multivariate normal distribution that has old embeddings' mean and covariance. As described in this article: https://nlp.stanford.edu/~johnhew/vocab-expansion.html. To disable this, use `mean_resizing=False`\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"print(len(tokenizer))  # Check vocabulary size","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:32:54.907196Z","iopub.execute_input":"2025-02-18T09:32:54.907437Z","iopub.status.idle":"2025-02-18T09:32:54.933038Z","shell.execute_reply.started":"2025-02-18T09:32:54.907417Z","shell.execute_reply":"2025-02-18T09:32:54.932183Z"}},"outputs":[{"name":"stdout","text":"128258\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"def predict(test, model, tokenizer):\n    y_pred = []\n    for i in tqdm(range(len(test))):\n        prompt = test.iloc[i][\"text\"]\n        pipe = pipeline(task=\"text-generation\", \n                        model=model, \n                        tokenizer=tokenizer, \n                        max_new_tokens=5,\n                        temperature=0.1,\n                       )\n        result = pipe(prompt)\n        answer = result[0]['generated_text'].split(\"=\")[-1].strip().lower()\n        \n#         print(f\"Prompt: {prompt}\")  # Log the prompt\n#         print(f\"Generated: {answer}\")  # Log the generated output\n\n        if \"positive\" in answer:\n            y_pred.append(\"Positive\")\n        else:\n            y_pred.append(\"Negative\")\n       \n        \n    return y_pred","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:33:00.951421Z","iopub.execute_input":"2025-02-18T09:33:00.951736Z","iopub.status.idle":"2025-02-18T09:33:00.956417Z","shell.execute_reply.started":"2025-02-18T09:33:00.951714Z","shell.execute_reply":"2025-02-18T09:33:00.955617Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"len(X_eval_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:33:03.608273Z","iopub.execute_input":"2025-02-18T09:33:03.608608Z","iopub.status.idle":"2025-02-18T09:33:03.613444Z","shell.execute_reply.started":"2025-02-18T09:33:03.608581Z","shell.execute_reply":"2025-02-18T09:33:03.612643Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"200"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"y_eval_pred = predict(X_eval_test, model, tokenizer)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:33:04.857507Z","iopub.execute_input":"2025-02-18T09:33:04.858005Z","iopub.status.idle":"2025-02-18T09:35:03.951930Z","shell.execute_reply.started":"2025-02-18T09:33:04.857973Z","shell.execute_reply":"2025-02-18T09:35:03.951198Z"}},"outputs":[{"name":"stderr","text":"  0%|          | 0/200 [00:00<?, ?it/s]Device set to use cuda:0\n  0%|          | 1/200 [00:01<06:11,  1.87s/it]Device set to use cuda:0\n  1%|          | 2/200 [00:02<03:29,  1.06s/it]Device set to use cuda:0\n  2%|▏         | 3/200 [00:02<02:49,  1.16it/s]Device set to use cuda:0\n  2%|▏         | 4/200 [00:03<02:29,  1.31it/s]Device set to use cuda:0\n  2%|▎         | 5/200 [00:04<02:10,  1.50it/s]Device set to use cuda:0\n  3%|▎         | 6/200 [00:04<01:57,  1.65it/s]Device set to use cuda:0\n  4%|▎         | 7/200 [00:05<01:50,  1.74it/s]Device set to use cuda:0\n  4%|▍         | 8/200 [00:05<01:48,  1.77it/s]Device set to use cuda:0\n  4%|▍         | 9/200 [00:06<01:41,  1.88it/s]Device set to use cuda:0\n  5%|▌         | 10/200 [00:06<01:42,  1.85it/s]Device set to use cuda:0\n  6%|▌         | 11/200 [00:07<01:37,  1.94it/s]Device set to use cuda:0\n  6%|▌         | 12/200 [00:07<01:36,  1.96it/s]Device set to use cuda:0\n  6%|▋         | 13/200 [00:08<01:39,  1.88it/s]Device set to use cuda:0\n  7%|▋         | 14/200 [00:08<01:38,  1.89it/s]Device set to use cuda:0\n  8%|▊         | 15/200 [00:09<01:37,  1.90it/s]Device set to use cuda:0\n  8%|▊         | 16/200 [00:09<01:35,  1.93it/s]Device set to use cuda:0\n  8%|▊         | 17/200 [00:10<01:30,  2.02it/s]Device set to use cuda:0\n  9%|▉         | 18/200 [00:10<01:31,  1.99it/s]Device set to use cuda:0\n 10%|▉         | 19/200 [00:11<01:31,  1.98it/s]Device set to use cuda:0\n 10%|█         | 20/200 [00:11<01:33,  1.92it/s]Device set to use cuda:0\n 10%|█         | 21/200 [00:12<01:29,  2.01it/s]Device set to use cuda:0\n 11%|█         | 22/200 [00:12<01:27,  2.04it/s]Device set to use cuda:0\n 12%|█▏        | 23/200 [00:13<01:33,  1.89it/s]Device set to use cuda:0\n 12%|█▏        | 24/200 [00:13<01:29,  1.97it/s]Device set to use cuda:0\n 12%|█▎        | 25/200 [00:14<01:26,  2.03it/s]Device set to use cuda:0\n 13%|█▎        | 26/200 [00:14<01:23,  2.08it/s]Device set to use cuda:0\n 14%|█▎        | 27/200 [00:15<01:21,  2.12it/s]Device set to use cuda:0\n 14%|█▍        | 28/200 [00:15<01:24,  2.04it/s]Device set to use cuda:0\n 14%|█▍        | 29/200 [00:16<01:24,  2.03it/s]Device set to use cuda:0\n 15%|█▌        | 30/200 [00:16<01:24,  2.01it/s]Device set to use cuda:0\n 16%|█▌        | 31/200 [00:17<01:39,  1.70it/s]Device set to use cuda:0\n 16%|█▌        | 32/200 [00:17<01:32,  1.81it/s]Device set to use cuda:0\n 16%|█▋        | 33/200 [00:18<01:30,  1.85it/s]Device set to use cuda:0\n 17%|█▋        | 34/200 [00:18<01:25,  1.94it/s]Device set to use cuda:0\n 18%|█▊        | 35/200 [00:19<01:25,  1.93it/s]Device set to use cuda:0\n 18%|█▊        | 36/200 [00:20<01:31,  1.79it/s]Device set to use cuda:0\n 18%|█▊        | 37/200 [00:20<01:29,  1.82it/s]Device set to use cuda:0\n 19%|█▉        | 38/200 [00:21<01:29,  1.80it/s]Device set to use cuda:0\n 20%|█▉        | 39/200 [00:21<01:33,  1.72it/s]Device set to use cuda:0\n 20%|██        | 40/200 [00:22<01:30,  1.77it/s]Device set to use cuda:0\n 20%|██        | 41/200 [00:22<01:28,  1.80it/s]Device set to use cuda:0\n 21%|██        | 42/200 [00:23<01:25,  1.85it/s]Device set to use cuda:0\n 22%|██▏       | 43/200 [00:23<01:20,  1.94it/s]Device set to use cuda:0\n 22%|██▏       | 44/200 [00:24<01:17,  2.00it/s]Device set to use cuda:0\n 22%|██▎       | 45/200 [00:24<01:18,  1.97it/s]Device set to use cuda:0\n 23%|██▎       | 46/200 [00:25<01:18,  1.96it/s]Device set to use cuda:0\n 24%|██▎       | 47/200 [00:25<01:23,  1.83it/s]Device set to use cuda:0\n 24%|██▍       | 48/200 [00:26<01:29,  1.69it/s]Device set to use cuda:0\n 24%|██▍       | 49/200 [00:27<01:23,  1.81it/s]Device set to use cuda:0\n 25%|██▌       | 50/200 [00:27<01:22,  1.82it/s]Device set to use cuda:0\n 26%|██▌       | 51/200 [00:28<01:22,  1.82it/s]Device set to use cuda:0\n 26%|██▌       | 52/200 [00:28<01:20,  1.85it/s]Device set to use cuda:0\n 26%|██▋       | 53/200 [00:29<01:18,  1.87it/s]Device set to use cuda:0\n 27%|██▋       | 54/200 [00:29<01:17,  1.89it/s]Device set to use cuda:0\n 28%|██▊       | 55/200 [00:30<01:16,  1.90it/s]Device set to use cuda:0\n 28%|██▊       | 56/200 [00:30<01:17,  1.87it/s]Device set to use cuda:0\n 28%|██▊       | 57/200 [00:31<01:16,  1.87it/s]Device set to use cuda:0\n 29%|██▉       | 58/200 [00:31<01:11,  1.97it/s]Device set to use cuda:0\n 30%|██▉       | 59/200 [00:32<01:11,  1.96it/s]Device set to use cuda:0\n 30%|███       | 60/200 [00:33<01:20,  1.74it/s]Device set to use cuda:0\n 30%|███       | 61/200 [00:33<01:25,  1.63it/s]Device set to use cuda:0\n 31%|███       | 62/200 [00:34<01:21,  1.70it/s]Device set to use cuda:0\n 32%|███▏      | 63/200 [00:34<01:22,  1.67it/s]Device set to use cuda:0\n 32%|███▏      | 64/200 [00:35<01:19,  1.71it/s]Device set to use cuda:0\n 32%|███▎      | 65/200 [00:36<01:18,  1.72it/s]Device set to use cuda:0\n 33%|███▎      | 66/200 [00:36<01:15,  1.78it/s]Device set to use cuda:0\n 34%|███▎      | 67/200 [00:37<01:17,  1.72it/s]Device set to use cuda:0\n 34%|███▍      | 68/200 [00:37<01:14,  1.77it/s]Device set to use cuda:0\n 34%|███▍      | 69/200 [00:38<01:15,  1.74it/s]Device set to use cuda:0\n 35%|███▌      | 70/200 [00:38<01:12,  1.80it/s]Device set to use cuda:0\n 36%|███▌      | 71/200 [00:39<01:08,  1.88it/s]Device set to use cuda:0\n 36%|███▌      | 72/200 [00:39<01:08,  1.87it/s]Device set to use cuda:0\n 36%|███▋      | 73/200 [00:40<01:12,  1.76it/s]Device set to use cuda:0\n 37%|███▋      | 74/200 [00:41<01:15,  1.66it/s]Device set to use cuda:0\n 38%|███▊      | 75/200 [00:41<01:12,  1.73it/s]Device set to use cuda:0\n 38%|███▊      | 76/200 [00:42<01:07,  1.83it/s]Device set to use cuda:0\n 38%|███▊      | 77/200 [00:42<01:10,  1.74it/s]Device set to use cuda:0\n 39%|███▉      | 78/200 [00:43<01:12,  1.68it/s]Device set to use cuda:0\n 40%|███▉      | 79/200 [00:43<01:08,  1.78it/s]Device set to use cuda:0\n 40%|████      | 80/200 [00:44<01:06,  1.81it/s]Device set to use cuda:0\n 40%|████      | 81/200 [00:45<01:06,  1.78it/s]Device set to use cuda:0\n 41%|████      | 82/200 [00:45<01:04,  1.82it/s]Device set to use cuda:0\n 42%|████▏     | 83/200 [00:46<01:03,  1.84it/s]Device set to use cuda:0\n 42%|████▏     | 84/200 [00:46<01:04,  1.80it/s]Device set to use cuda:0\n 42%|████▎     | 85/200 [00:47<01:01,  1.87it/s]Device set to use cuda:0\n 43%|████▎     | 86/200 [00:47<01:05,  1.74it/s]Device set to use cuda:0\n 44%|████▎     | 87/200 [00:48<01:01,  1.83it/s]Device set to use cuda:0\n 44%|████▍     | 88/200 [00:48<01:01,  1.83it/s]Device set to use cuda:0\n 44%|████▍     | 89/200 [00:49<01:05,  1.70it/s]Device set to use cuda:0\n 45%|████▌     | 90/200 [00:50<01:02,  1.75it/s]Device set to use cuda:0\n 46%|████▌     | 91/200 [00:50<01:02,  1.75it/s]Device set to use cuda:0\n 46%|████▌     | 92/200 [00:51<00:59,  1.83it/s]Device set to use cuda:0\n 46%|████▋     | 93/200 [00:51<00:58,  1.83it/s]Device set to use cuda:0\n 47%|████▋     | 94/200 [00:52<00:55,  1.90it/s]Device set to use cuda:0\n 48%|████▊     | 95/200 [00:52<00:56,  1.84it/s]Device set to use cuda:0\n 48%|████▊     | 96/200 [00:53<00:54,  1.92it/s]Device set to use cuda:0\n 48%|████▊     | 97/200 [00:53<00:52,  1.95it/s]Device set to use cuda:0\n 49%|████▉     | 98/200 [00:54<00:54,  1.87it/s]Device set to use cuda:0\n 50%|████▉     | 99/200 [00:54<00:54,  1.85it/s]Device set to use cuda:0\n 50%|█████     | 100/200 [00:55<00:58,  1.69it/s]Device set to use cuda:0\n 50%|█████     | 101/200 [00:56<00:57,  1.72it/s]Device set to use cuda:0\n 51%|█████     | 102/200 [00:56<00:54,  1.81it/s]Device set to use cuda:0\n 52%|█████▏    | 103/200 [00:57<00:51,  1.88it/s]Device set to use cuda:0\n 52%|█████▏    | 104/200 [00:57<00:51,  1.87it/s]Device set to use cuda:0\n 52%|█████▎    | 105/200 [00:58<00:55,  1.70it/s]Device set to use cuda:0\n 53%|█████▎    | 106/200 [00:59<00:57,  1.63it/s]Device set to use cuda:0\n 54%|█████▎    | 107/200 [00:59<00:57,  1.63it/s]Device set to use cuda:0\n 54%|█████▍    | 108/200 [01:00<01:01,  1.49it/s]Device set to use cuda:0\n 55%|█████▍    | 109/200 [01:00<00:56,  1.61it/s]Device set to use cuda:0\n 55%|█████▌    | 110/200 [01:01<00:57,  1.55it/s]Device set to use cuda:0\n 56%|█████▌    | 111/200 [01:02<00:53,  1.67it/s]Device set to use cuda:0\n 56%|█████▌    | 112/200 [01:02<00:51,  1.69it/s]Device set to use cuda:0\n 56%|█████▋    | 113/200 [01:03<00:48,  1.80it/s]Device set to use cuda:0\n 57%|█████▋    | 114/200 [01:03<00:47,  1.80it/s]Device set to use cuda:0\n 57%|█████▊    | 115/200 [01:04<00:50,  1.67it/s]Device set to use cuda:0\n 58%|█████▊    | 116/200 [01:04<00:49,  1.71it/s]Device set to use cuda:0\n 58%|█████▊    | 117/200 [01:05<00:48,  1.71it/s]Device set to use cuda:0\n 59%|█████▉    | 118/200 [01:06<00:48,  1.69it/s]Device set to use cuda:0\n 60%|█████▉    | 119/200 [01:06<00:47,  1.72it/s]Device set to use cuda:0\n 60%|██████    | 120/200 [01:07<00:46,  1.71it/s]Device set to use cuda:0\n 60%|██████    | 121/200 [01:08<00:48,  1.62it/s]Device set to use cuda:0\n 61%|██████    | 122/200 [01:08<00:46,  1.66it/s]Device set to use cuda:0\n 62%|██████▏   | 123/200 [01:09<00:45,  1.69it/s]Device set to use cuda:0\n 62%|██████▏   | 124/200 [01:09<00:44,  1.71it/s]Device set to use cuda:0\n 62%|██████▎   | 125/200 [01:10<00:43,  1.73it/s]Device set to use cuda:0\n 63%|██████▎   | 126/200 [01:10<00:42,  1.76it/s]Device set to use cuda:0\n 64%|██████▎   | 127/200 [01:11<00:41,  1.74it/s]Device set to use cuda:0\n 64%|██████▍   | 128/200 [01:12<00:44,  1.63it/s]Device set to use cuda:0\n 64%|██████▍   | 129/200 [01:12<00:46,  1.53it/s]Device set to use cuda:0\n 65%|██████▌   | 130/200 [01:13<00:44,  1.58it/s]Device set to use cuda:0\n 66%|██████▌   | 131/200 [01:14<00:45,  1.53it/s]Device set to use cuda:0\n 66%|██████▌   | 132/200 [01:14<00:43,  1.58it/s]Device set to use cuda:0\n 66%|██████▋   | 133/200 [01:15<00:39,  1.71it/s]Device set to use cuda:0\n 67%|██████▋   | 134/200 [01:15<00:38,  1.73it/s]Device set to use cuda:0\n 68%|██████▊   | 135/200 [01:16<00:40,  1.62it/s]Device set to use cuda:0\n 68%|██████▊   | 136/200 [01:16<00:37,  1.72it/s]Device set to use cuda:0\n 68%|██████▊   | 137/200 [01:17<00:37,  1.69it/s]Device set to use cuda:0\n 69%|██████▉   | 138/200 [01:18<00:36,  1.69it/s]Device set to use cuda:0\n 70%|██████▉   | 139/200 [01:18<00:36,  1.67it/s]Device set to use cuda:0\n 70%|███████   | 140/200 [01:19<00:43,  1.37it/s]Device set to use cuda:0\n 70%|███████   | 141/200 [01:20<00:42,  1.38it/s]Device set to use cuda:0\n 71%|███████   | 142/200 [01:21<00:38,  1.52it/s]Device set to use cuda:0\n 72%|███████▏  | 143/200 [01:21<00:38,  1.48it/s]Device set to use cuda:0\n 72%|███████▏  | 144/200 [01:22<00:38,  1.45it/s]Device set to use cuda:0\n 72%|███████▎  | 145/200 [01:23<00:37,  1.45it/s]Device set to use cuda:0\n 73%|███████▎  | 146/200 [01:23<00:37,  1.44it/s]Device set to use cuda:0\n 74%|███████▎  | 147/200 [01:24<00:35,  1.50it/s]Device set to use cuda:0\n 74%|███████▍  | 148/200 [01:24<00:31,  1.63it/s]Device set to use cuda:0\n 74%|███████▍  | 149/200 [01:25<00:30,  1.66it/s]Device set to use cuda:0\n 75%|███████▌  | 150/200 [01:26<00:29,  1.68it/s]Device set to use cuda:0\n 76%|███████▌  | 151/200 [01:26<00:27,  1.77it/s]Device set to use cuda:0\n 76%|███████▌  | 152/200 [01:27<00:30,  1.58it/s]Device set to use cuda:0\n 76%|███████▋  | 153/200 [01:28<00:31,  1.50it/s]Device set to use cuda:0\n 77%|███████▋  | 154/200 [01:28<00:29,  1.58it/s]Device set to use cuda:0\n 78%|███████▊  | 155/200 [01:29<00:27,  1.62it/s]Device set to use cuda:0\n 78%|███████▊  | 156/200 [01:29<00:26,  1.65it/s]Device set to use cuda:0\n 78%|███████▊  | 157/200 [01:30<00:24,  1.74it/s]Device set to use cuda:0\n 79%|███████▉  | 158/200 [01:31<00:33,  1.25it/s]Device set to use cuda:0\n 80%|███████▉  | 159/200 [01:32<00:28,  1.42it/s]Device set to use cuda:0\n 80%|████████  | 160/200 [01:32<00:28,  1.40it/s]Device set to use cuda:0\n 80%|████████  | 161/200 [01:33<00:28,  1.36it/s]Device set to use cuda:0\n 81%|████████  | 162/200 [01:34<00:25,  1.49it/s]Device set to use cuda:0\n 82%|████████▏ | 163/200 [01:34<00:25,  1.46it/s]Device set to use cuda:0\n 82%|████████▏ | 164/200 [01:35<00:25,  1.42it/s]Device set to use cuda:0\n 82%|████████▎ | 165/200 [01:36<00:24,  1.41it/s]Device set to use cuda:0\n 83%|████████▎ | 166/200 [01:37<00:22,  1.49it/s]Device set to use cuda:0\n 84%|████████▎ | 167/200 [01:37<00:21,  1.55it/s]Device set to use cuda:0\n 84%|████████▍ | 168/200 [01:38<00:20,  1.53it/s]Device set to use cuda:0\n 84%|████████▍ | 169/200 [01:39<00:21,  1.46it/s]Device set to use cuda:0\n 85%|████████▌ | 170/200 [01:39<00:18,  1.59it/s]Device set to use cuda:0\n 86%|████████▌ | 171/200 [01:40<00:17,  1.62it/s]Device set to use cuda:0\n 86%|████████▌ | 172/200 [01:40<00:17,  1.59it/s]Device set to use cuda:0\n 86%|████████▋ | 173/200 [01:41<00:17,  1.51it/s]Device set to use cuda:0\n 87%|████████▋ | 174/200 [01:42<00:15,  1.63it/s]Device set to use cuda:0\n 88%|████████▊ | 175/200 [01:42<00:14,  1.71it/s]Device set to use cuda:0\n 88%|████████▊ | 176/200 [01:43<00:15,  1.54it/s]Device set to use cuda:0\n 88%|████████▊ | 177/200 [01:43<00:14,  1.55it/s]Device set to use cuda:0\n 89%|████████▉ | 178/200 [01:44<00:14,  1.48it/s]Device set to use cuda:0\n 90%|████████▉ | 179/200 [01:45<00:14,  1.42it/s]Device set to use cuda:0\n 90%|█████████ | 180/200 [01:46<00:12,  1.54it/s]Device set to use cuda:0\n 90%|█████████ | 181/200 [01:46<00:12,  1.55it/s]Device set to use cuda:0\n 91%|█████████ | 182/200 [01:47<00:12,  1.49it/s]Device set to use cuda:0\n 92%|█████████▏| 183/200 [01:47<00:10,  1.60it/s]Device set to use cuda:0\n 92%|█████████▏| 184/200 [01:48<00:10,  1.58it/s]Device set to use cuda:0\n 92%|█████████▎| 185/200 [01:49<00:10,  1.48it/s]Device set to use cuda:0\n 93%|█████████▎| 186/200 [01:50<00:09,  1.44it/s]Device set to use cuda:0\n 94%|█████████▎| 187/200 [01:50<00:08,  1.48it/s]Device set to use cuda:0\n 94%|█████████▍| 188/200 [01:51<00:07,  1.54it/s]Device set to use cuda:0\n 94%|█████████▍| 189/200 [01:51<00:07,  1.55it/s]Device set to use cuda:0\n 95%|█████████▌| 190/200 [01:52<00:06,  1.59it/s]Device set to use cuda:0\n 96%|█████████▌| 191/200 [01:53<00:05,  1.59it/s]Device set to use cuda:0\n 96%|█████████▌| 192/200 [01:53<00:05,  1.44it/s]Device set to use cuda:0\n 96%|█████████▋| 193/200 [01:54<00:04,  1.41it/s]Device set to use cuda:0\n 97%|█████████▋| 194/200 [01:55<00:03,  1.52it/s]Device set to use cuda:0\n 98%|█████████▊| 195/200 [01:55<00:03,  1.60it/s]Device set to use cuda:0\n 98%|█████████▊| 196/200 [01:56<00:02,  1.58it/s]Device set to use cuda:0\n 98%|█████████▊| 197/200 [01:57<00:01,  1.59it/s]Device set to use cuda:0\n 99%|█████████▉| 198/200 [01:57<00:01,  1.62it/s]Device set to use cuda:0\n100%|█████████▉| 199/200 [01:58<00:00,  1.61it/s]Device set to use cuda:0\n100%|██████████| 200/200 [01:59<00:00,  1.68it/s]\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"# y_eval_pred","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T19:48:16.654584Z","iopub.execute_input":"2025-02-17T19:48:16.654867Z","iopub.status.idle":"2025-02-17T19:48:16.659395Z","shell.execute_reply.started":"2025-02-17T19:48:16.654844Z","shell.execute_reply":"2025-02-17T19:48:16.658254Z"}},"outputs":[],"execution_count":95},{"cell_type":"code","source":"len(y_eval_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:35:03.952883Z","iopub.execute_input":"2025-02-18T09:35:03.953168Z","iopub.status.idle":"2025-02-18T09:35:03.958247Z","shell.execute_reply.started":"2025-02-18T09:35:03.953146Z","shell.execute_reply":"2025-02-18T09:35:03.957259Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"200"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"from sklearn.metrics import f1_score\n\ndef evaluate(y_true, y_pred):\n    # Standardize label mapping (case-insensitive)\n    mapping = {'positive': 1, 'negative': 0}\n\n    # Convert labels to lowercase and map them to numerical values\n    try:\n        y_true = np.array([mapping[label.strip().lower()] for label in y_true])\n        y_pred = np.array([mapping[label.strip().lower()] for label in y_pred])\n    except KeyError as e:\n        raise ValueError(f\"Unexpected label found: {e}. Allowed labels: {list(mapping.keys())}\")\n\n    # Calculate overall accuracy\n    accuracy = accuracy_score(y_true, y_pred)\n    print(f'Overall Accuracy: {accuracy:.3f}')\n    \n    # Calculate F1 Score\n    f1 = f1_score(y_true, y_pred, average='weighted')  # 'weighted' accounts for class imbalance\n    print(f'F1 Score: {f1:.3f}')\n    \n    # Calculate accuracy per label\n    unique_labels = np.unique(y_true)  # Get unique class labels\n    for label in unique_labels:\n        label_indices = (y_true == label)\n        label_accuracy = accuracy_score(y_true[label_indices], y_pred[label_indices])\n        print(f'Accuracy for label {label}: {label_accuracy:.3f}')\n    \n    # Generate classification report\n    class_report = classification_report(y_true, y_pred, target_names=['Negative', 'Positive'])\n    print('\\nClassification Report:')\n    print(class_report)\n    \n    # Generate confusion matrix\n    conf_matrix = confusion_matrix(y_true, y_pred, labels=[0, 1])\n    print('\\nConfusion Matrix:')\n    print(conf_matrix)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:35:03.960029Z","iopub.execute_input":"2025-02-18T09:35:03.960336Z","iopub.status.idle":"2025-02-18T09:35:03.979286Z","shell.execute_reply.started":"2025-02-18T09:35:03.960314Z","shell.execute_reply":"2025-02-18T09:35:03.978444Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"evaluate(y_eval_true, y_eval_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:35:03.980304Z","iopub.execute_input":"2025-02-18T09:35:03.980522Z","iopub.status.idle":"2025-02-18T09:35:04.016344Z","shell.execute_reply.started":"2025-02-18T09:35:03.980505Z","shell.execute_reply":"2025-02-18T09:35:04.015453Z"}},"outputs":[{"name":"stdout","text":"Overall Accuracy: 1.000\nF1 Score: 1.000\nAccuracy for label 0: 1.000\nAccuracy for label 1: 1.000\n\nClassification Report:\n              precision    recall  f1-score   support\n\n    Negative       1.00      1.00      1.00        99\n    Positive       1.00      1.00      1.00       101\n\n    accuracy                           1.00       200\n   macro avg       1.00      1.00      1.00       200\nweighted avg       1.00      1.00      1.00       200\n\n\nConfusion Matrix:\n[[ 99   0]\n [  0 101]]\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"print(set(y_eval_true))\nprint(set(y_eval_pred))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:35:04.017321Z","iopub.execute_input":"2025-02-18T09:35:04.017643Z","iopub.status.idle":"2025-02-18T09:35:04.022333Z","shell.execute_reply.started":"2025-02-18T09:35:04.017610Z","shell.execute_reply":"2025-02-18T09:35:04.021446Z"}},"outputs":[{"name":"stdout","text":"{'Positive', 'Negative'}\n{'Positive', 'Negative'}\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"y_eval_true","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T19:40:59.857628Z","iopub.execute_input":"2025-02-17T19:40:59.857918Z","iopub.status.idle":"2025-02-17T19:40:59.865011Z","shell.execute_reply.started":"2025-02-17T19:40:59.857898Z","shell.execute_reply":"2025-02-17T19:40:59.864062Z"}},"outputs":[{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"548    Positive\n626    Negative\n942    Positive\n223    Negative\n513    Positive\n         ...   \n255    Negative\n279    Positive\n72     Positive\n3      Positive\n917    Positive\nName: label, Length: 200, dtype: object"},"metadata":{}}],"execution_count":93},{"cell_type":"code","source":"# Generate and display the confusion matrix\nconf_matrix = confusion_matrix(y_eval_true, y_eval_pred, labels=[\"negative\", \"positive\"])\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['negative', 'positive'], yticklabels=['negative', 'positive'])\nplt.xlabel('Predicted Sentiment')\nplt.ylabel('Actual Sentiment')\nplt.title('Confusion Matrix for Llama 3.1 (no-finetuning) Sentiment Analysis')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T19:58:28.918355Z","iopub.execute_input":"2025-02-17T19:58:28.918677Z","iopub.status.idle":"2025-02-17T19:58:29.147970Z","shell.execute_reply.started":"2025-02-17T19:58:28.918650Z","shell.execute_reply":"2025-02-17T19:58:29.146896Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":108},{"cell_type":"code","source":"y_pred = predict(X_test, model, tokenizer)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:35:04.023104Z","iopub.execute_input":"2025-02-18T09:35:04.023362Z","iopub.status.idle":"2025-02-18T09:36:07.433562Z","shell.execute_reply.started":"2025-02-18T09:35:04.023344Z","shell.execute_reply":"2025-02-18T09:36:07.432617Z"}},"outputs":[{"name":"stderr","text":"  0%|          | 0/100 [00:00<?, ?it/s]Device set to use cuda:0\n  1%|          | 1/100 [00:00<00:52,  1.90it/s]Device set to use cuda:0\n  2%|▏         | 2/100 [00:01<00:56,  1.74it/s]Device set to use cuda:0\n  3%|▎         | 3/100 [00:01<00:53,  1.81it/s]Device set to use cuda:0\n  4%|▍         | 4/100 [00:02<01:01,  1.57it/s]Device set to use cuda:0\n  5%|▌         | 5/100 [00:03<01:01,  1.56it/s]Device set to use cuda:0\n  6%|▌         | 6/100 [00:03<01:04,  1.46it/s]Device set to use cuda:0\n  7%|▋         | 7/100 [00:04<00:58,  1.58it/s]Device set to use cuda:0\n  8%|▊         | 8/100 [00:05<01:02,  1.47it/s]Device set to use cuda:0\n  9%|▉         | 9/100 [00:05<01:00,  1.49it/s]Device set to use cuda:0\n 10%|█         | 10/100 [00:06<00:58,  1.53it/s]Device set to use cuda:0\n 11%|█         | 11/100 [00:07<01:01,  1.45it/s]Device set to use cuda:0\n 12%|█▏        | 12/100 [00:07<01:00,  1.46it/s]Device set to use cuda:0\n 13%|█▎        | 13/100 [00:08<00:57,  1.52it/s]Device set to use cuda:0\n 14%|█▍        | 14/100 [00:09<00:56,  1.53it/s]Device set to use cuda:0\n 15%|█▌        | 15/100 [00:09<00:52,  1.62it/s]Device set to use cuda:0\n 16%|█▌        | 16/100 [00:10<00:56,  1.50it/s]Device set to use cuda:0\n 17%|█▋        | 17/100 [00:11<00:58,  1.43it/s]Device set to use cuda:0\n 18%|█▊        | 18/100 [00:11<00:55,  1.49it/s]Device set to use cuda:0\n 19%|█▉        | 19/100 [00:12<01:01,  1.32it/s]Device set to use cuda:0\n 20%|██        | 20/100 [00:13<00:54,  1.46it/s]Device set to use cuda:0\n 21%|██        | 21/100 [00:13<00:50,  1.57it/s]Device set to use cuda:0\n 22%|██▏       | 22/100 [00:14<00:47,  1.65it/s]Device set to use cuda:0\n 23%|██▎       | 23/100 [00:14<00:44,  1.72it/s]Device set to use cuda:0\n 24%|██▍       | 24/100 [00:15<00:48,  1.58it/s]Device set to use cuda:0\n 25%|██▌       | 25/100 [00:16<00:48,  1.56it/s]Device set to use cuda:0\n 26%|██▌       | 26/100 [00:16<00:47,  1.55it/s]Device set to use cuda:0\n 27%|██▋       | 27/100 [00:17<00:46,  1.58it/s]Device set to use cuda:0\n 28%|██▊       | 28/100 [00:18<00:51,  1.40it/s]Device set to use cuda:0\n 29%|██▉       | 29/100 [00:19<00:48,  1.46it/s]Device set to use cuda:0\n 30%|███       | 30/100 [00:19<00:49,  1.43it/s]Device set to use cuda:0\n 31%|███       | 31/100 [00:20<00:45,  1.51it/s]Device set to use cuda:0\n 32%|███▏      | 32/100 [00:21<00:46,  1.46it/s]Device set to use cuda:0\n 33%|███▎      | 33/100 [00:21<00:46,  1.43it/s]Device set to use cuda:0\n 34%|███▍      | 34/100 [00:22<00:44,  1.50it/s]Device set to use cuda:0\n 35%|███▌      | 35/100 [00:23<00:41,  1.56it/s]Device set to use cuda:0\n 36%|███▌      | 36/100 [00:23<00:38,  1.67it/s]Device set to use cuda:0\n 37%|███▋      | 37/100 [00:24<00:37,  1.67it/s]Device set to use cuda:0\n 38%|███▊      | 38/100 [00:24<00:35,  1.74it/s]Device set to use cuda:0\n 39%|███▉      | 39/100 [00:25<00:34,  1.79it/s]Device set to use cuda:0\n 40%|████      | 40/100 [00:25<00:37,  1.62it/s]Device set to use cuda:0\n 41%|████      | 41/100 [00:26<00:34,  1.70it/s]Device set to use cuda:0\n 42%|████▏     | 42/100 [00:27<00:34,  1.70it/s]Device set to use cuda:0\n 43%|████▎     | 43/100 [00:27<00:33,  1.68it/s]Device set to use cuda:0\n 44%|████▍     | 44/100 [00:28<00:36,  1.52it/s]Device set to use cuda:0\n 45%|████▌     | 45/100 [00:29<00:34,  1.58it/s]Device set to use cuda:0\n 46%|████▌     | 46/100 [00:29<00:32,  1.68it/s]Device set to use cuda:0\n 47%|████▋     | 47/100 [00:30<00:30,  1.76it/s]Device set to use cuda:0\n 48%|████▊     | 48/100 [00:30<00:32,  1.60it/s]Device set to use cuda:0\n 49%|████▉     | 49/100 [00:31<00:30,  1.69it/s]Device set to use cuda:0\n 50%|█████     | 50/100 [00:31<00:29,  1.69it/s]Device set to use cuda:0\n 51%|█████     | 51/100 [00:32<00:27,  1.77it/s]Device set to use cuda:0\n 52%|█████▏    | 52/100 [00:32<00:26,  1.82it/s]Device set to use cuda:0\n 53%|█████▎    | 53/100 [00:33<00:25,  1.86it/s]Device set to use cuda:0\n 54%|█████▍    | 54/100 [00:34<00:26,  1.76it/s]Device set to use cuda:0\n 55%|█████▌    | 55/100 [00:34<00:26,  1.73it/s]Device set to use cuda:0\n 56%|█████▌    | 56/100 [00:35<00:25,  1.73it/s]Device set to use cuda:0\n 57%|█████▋    | 57/100 [00:35<00:23,  1.80it/s]Device set to use cuda:0\n 58%|█████▊    | 58/100 [00:36<00:25,  1.66it/s]Device set to use cuda:0\n 59%|█████▉    | 59/100 [00:36<00:23,  1.75it/s]Device set to use cuda:0\n 60%|██████    | 60/100 [00:37<00:23,  1.70it/s]Device set to use cuda:0\n 61%|██████    | 61/100 [00:38<00:21,  1.81it/s]Device set to use cuda:0\n 62%|██████▏   | 62/100 [00:38<00:20,  1.89it/s]Device set to use cuda:0\n 63%|██████▎   | 63/100 [00:39<00:19,  1.88it/s]Device set to use cuda:0\n 64%|██████▍   | 64/100 [00:39<00:21,  1.69it/s]Device set to use cuda:0\n 65%|██████▌   | 65/100 [00:40<00:22,  1.52it/s]Device set to use cuda:0\n 66%|██████▌   | 66/100 [00:41<00:20,  1.63it/s]Device set to use cuda:0\n 67%|██████▋   | 67/100 [00:41<00:20,  1.65it/s]Device set to use cuda:0\n 68%|██████▊   | 68/100 [00:42<00:21,  1.50it/s]Device set to use cuda:0\n 69%|██████▉   | 69/100 [00:43<00:21,  1.46it/s]Device set to use cuda:0\n 70%|███████   | 70/100 [00:44<00:22,  1.33it/s]Device set to use cuda:0\n 71%|███████   | 71/100 [00:44<00:19,  1.47it/s]Device set to use cuda:0\n 72%|███████▏  | 72/100 [00:45<00:19,  1.40it/s]Device set to use cuda:0\n 73%|███████▎  | 73/100 [00:45<00:17,  1.53it/s]Device set to use cuda:0\n 74%|███████▍  | 74/100 [00:46<00:16,  1.59it/s]Device set to use cuda:0\n 75%|███████▌  | 75/100 [00:47<00:16,  1.51it/s]Device set to use cuda:0\n 76%|███████▌  | 76/100 [00:47<00:16,  1.47it/s]Device set to use cuda:0\n 77%|███████▋  | 77/100 [00:48<00:15,  1.45it/s]Device set to use cuda:0\n 78%|███████▊  | 78/100 [00:49<00:14,  1.53it/s]Device set to use cuda:0\n 79%|███████▉  | 79/100 [00:49<00:13,  1.53it/s]Device set to use cuda:0\n 80%|████████  | 80/100 [00:50<00:15,  1.29it/s]Device set to use cuda:0\n 81%|████████  | 81/100 [00:51<00:13,  1.40it/s]Device set to use cuda:0\n 82%|████████▏ | 82/100 [00:52<00:12,  1.48it/s]Device set to use cuda:0\n 83%|████████▎ | 83/100 [00:52<00:11,  1.53it/s]Device set to use cuda:0\n 84%|████████▍ | 84/100 [00:53<00:10,  1.57it/s]Device set to use cuda:0\n 85%|████████▌ | 85/100 [00:53<00:08,  1.67it/s]Device set to use cuda:0\n 86%|████████▌ | 86/100 [00:54<00:08,  1.74it/s]Device set to use cuda:0\n 87%|████████▋ | 87/100 [00:55<00:08,  1.61it/s]Device set to use cuda:0\n 88%|████████▊ | 88/100 [00:55<00:07,  1.70it/s]Device set to use cuda:0\n 89%|████████▉ | 89/100 [00:56<00:06,  1.69it/s]Device set to use cuda:0\n 90%|█████████ | 90/100 [00:57<00:06,  1.52it/s]Device set to use cuda:0\n 91%|█████████ | 91/100 [00:57<00:05,  1.62it/s]Device set to use cuda:0\n 92%|█████████▏| 92/100 [00:58<00:04,  1.71it/s]Device set to use cuda:0\n 93%|█████████▎| 93/100 [00:58<00:04,  1.67it/s]Device set to use cuda:0\n 94%|█████████▍| 94/100 [00:59<00:03,  1.56it/s]Device set to use cuda:0\n 95%|█████████▌| 95/100 [01:00<00:03,  1.60it/s]Device set to use cuda:0\n 96%|█████████▌| 96/100 [01:00<00:02,  1.61it/s]Device set to use cuda:0\n 97%|█████████▋| 97/100 [01:01<00:01,  1.63it/s]Device set to use cuda:0\n 98%|█████████▊| 98/100 [01:02<00:01,  1.43it/s]Device set to use cuda:0\n 99%|█████████▉| 99/100 [01:02<00:00,  1.40it/s]Device set to use cuda:0\n100%|██████████| 100/100 [01:03<00:00,  1.58it/s]\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"len(y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T20:03:55.144875Z","iopub.execute_input":"2025-02-17T20:03:55.145164Z","iopub.status.idle":"2025-02-17T20:03:55.150153Z","shell.execute_reply.started":"2025-02-17T20:03:55.145143Z","shell.execute_reply":"2025-02-17T20:03:55.149361Z"}},"outputs":[{"execution_count":111,"output_type":"execute_result","data":{"text/plain":"100"},"metadata":{}}],"execution_count":111},{"cell_type":"code","source":"predicted = pd.DataFrame({'ID': np.arange(1,len(y_pred)+1), 'label': y_pred })\npredicted.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:36:15.250437Z","iopub.execute_input":"2025-02-18T09:36:15.250813Z","iopub.status.idle":"2025-02-18T09:36:15.256666Z","shell.execute_reply.started":"2025-02-18T09:36:15.250781Z","shell.execute_reply":"2025-02-18T09:36:15.255952Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"from datasets import Dataset\n\n# Now convert the DataFrame to a dataset\ntrain_data = Dataset.from_pandas(X_train)\neval_data = Dataset.from_pandas(X_eval)\n\n\n# Assuming `dataset` is a Hugging Face dataset object\ntrain_data = train_data.remove_columns(['__index_level_0__'])\neval_data = eval_data.remove_columns(['__index_level_0__'])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:36:25.969773Z","iopub.execute_input":"2025-02-18T09:36:25.970064Z","iopub.status.idle":"2025-02-18T09:36:25.996002Z","shell.execute_reply.started":"2025-02-18T09:36:25.970044Z","shell.execute_reply":"2025-02-18T09:36:25.994885Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"eval_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:36:27.769364Z","iopub.execute_input":"2025-02-18T09:36:27.769687Z","iopub.status.idle":"2025-02-18T09:36:27.775193Z","shell.execute_reply.started":"2025-02-18T09:36:27.769665Z","shell.execute_reply":"2025-02-18T09:36:27.774235Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"Dataset({\n    features: ['text', 'label'],\n    num_rows: 200\n})"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"train_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:36:30.044211Z","iopub.execute_input":"2025-02-18T09:36:30.044567Z","iopub.status.idle":"2025-02-18T09:36:30.049822Z","shell.execute_reply.started":"2025-02-18T09:36:30.044519Z","shell.execute_reply":"2025-02-18T09:36:30.048991Z"}},"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"Dataset({\n    features: ['text', 'label'],\n    num_rows: 800\n})"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"print(\"Train dataset columns:\", train_data.column_names)\nprint(\"Eval dataset columns:\", eval_data.column_names)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:36:31.390996Z","iopub.execute_input":"2025-02-18T09:36:31.391277Z","iopub.status.idle":"2025-02-18T09:36:31.396293Z","shell.execute_reply.started":"2025-02-18T09:36:31.391258Z","shell.execute_reply":"2025-02-18T09:36:31.395357Z"}},"outputs":[{"name":"stdout","text":"Train dataset columns: ['text', 'label']\nEval dataset columns: ['text', 'label']\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"from trl import SFTConfig, SFTTrainer","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:36:35.190345Z","iopub.execute_input":"2025-02-18T09:36:35.190641Z","iopub.status.idle":"2025-02-18T09:36:35.194229Z","shell.execute_reply.started":"2025-02-18T09:36:35.190619Z","shell.execute_reply":"2025-02-18T09:36:35.193569Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"model.config.quantization_config.to_dict()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T03:43:09.568010Z","iopub.execute_input":"2025-02-18T03:43:09.568297Z","iopub.status.idle":"2025-02-18T03:43:09.573895Z","shell.execute_reply.started":"2025-02-18T03:43:09.568276Z","shell.execute_reply":"2025-02-18T03:43:09.572960Z"}},"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"{'quant_method': <QuantizationMethod.BITS_AND_BYTES: 'bitsandbytes'>,\n '_load_in_8bit': False,\n '_load_in_4bit': True,\n 'llm_int8_threshold': 6.0,\n 'llm_int8_skip_modules': None,\n 'llm_int8_enable_fp32_cpu_offload': False,\n 'llm_int8_has_fp16_weight': False,\n 'bnb_4bit_quant_type': 'nf4',\n 'bnb_4bit_use_double_quant': True,\n 'bnb_4bit_compute_dtype': 'float16',\n 'bnb_4bit_quant_storage': 'uint8',\n 'load_in_4bit': True,\n 'load_in_8bit': False}"},"metadata":{}}],"execution_count":67},{"cell_type":"code","source":"OUTPUT_DIR = \"experiments\"\n\n%load_ext tensorboard\n%tensorboard --logdir experiments/runs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T03:44:56.653119Z","iopub.execute_input":"2025-02-18T03:44:56.653452Z","iopub.status.idle":"2025-02-18T03:45:03.212483Z","shell.execute_reply.started":"2025-02-18T03:44:56.653423Z","shell.execute_reply":"2025-02-18T03:45:03.211720Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"\n        (async () => {\n            const url = new URL(await google.colab.kernel.proxyPort(6006, {'cache': true}));\n            url.searchParams.set('tensorboardColab', 'true');\n            const iframe = document.createElement('iframe');\n            iframe.src = url;\n            iframe.setAttribute('width', '100%');\n            iframe.setAttribute('height', '800');\n            iframe.setAttribute('frameborder', 0);\n            document.body.appendChild(iframe);\n        })();\n    "},"metadata":{}}],"execution_count":69},{"cell_type":"code","source":"from inspect import signature\nprint(signature(SFTTrainer.__init__))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T03:05:08.452787Z","iopub.execute_input":"2025-02-18T03:05:08.453101Z","iopub.status.idle":"2025-02-18T03:05:08.458053Z","shell.execute_reply.started":"2025-02-18T03:05:08.453077Z","shell.execute_reply":"2025-02-18T03:05:08.457334Z"}},"outputs":[{"name":"stdout","text":"(self, model: Union[str, torch.nn.modules.module.Module, transformers.modeling_utils.PreTrainedModel], args: Union[trl.trainer.sft_config.SFTConfig, transformers.training_args.TrainingArguments, NoneType] = None, data_collator: Optional[transformers.data.data_collator.DataCollator] = None, train_dataset: Union[datasets.arrow_dataset.Dataset, datasets.iterable_dataset.IterableDataset, NoneType] = None, eval_dataset: Union[datasets.arrow_dataset.Dataset, dict[str, datasets.arrow_dataset.Dataset], NoneType] = None, processing_class: Union[transformers.tokenization_utils_base.PreTrainedTokenizerBase, transformers.image_processing_utils.BaseImageProcessor, transformers.feature_extraction_utils.FeatureExtractionMixin, transformers.processing_utils.ProcessorMixin, NoneType] = None, compute_loss_func: Optional[Callable] = None, compute_metrics: Optional[Callable[[transformers.trainer_utils.EvalPrediction], dict]] = None, callbacks: Optional[list[transformers.trainer_callback.TrainerCallback]] = None, optimizers: tuple[typing.Optional[torch.optim.optimizer.Optimizer], typing.Optional[torch.optim.lr_scheduler.LambdaLR]] = (None, None), optimizer_cls_and_kwargs: Optional[tuple[Type[torch.optim.optimizer.Optimizer], dict[str, Any]]] = None, preprocess_logits_for_metrics: Optional[Callable[[torch.Tensor, torch.Tensor], torch.Tensor]] = None, peft_config: Optional[ForwardRef('PeftConfig')] = None, formatting_func: Union[Callable[[dict], str], Callable[[dict], list[str]], NoneType] = None)\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"len(tokenizer)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-17T21:08:40.458684Z","iopub.execute_input":"2025-02-17T21:08:40.459017Z","iopub.status.idle":"2025-02-17T21:08:40.487233Z","shell.execute_reply.started":"2025-02-17T21:08:40.458990Z","shell.execute_reply":"2025-02-17T21:08:40.484598Z"}},"outputs":[{"execution_count":141,"output_type":"execute_result","data":{"text/plain":"128258"},"metadata":{}}],"execution_count":141},{"cell_type":"code","source":"output_dir=\"trained_weigths\"\n\npeft_config = LoraConfig(\n        lora_alpha=16, \n        lora_dropout=0.1,\n        r=64,\n        bias=\"none\",\n        target_modules=[\"q_proj\", \"v_proj\"],  # Specify exact linear layers (adjust based on model architecture)\n        task_type=\"CAUSAL_LM\",\n)\n\ntraining_arguments = TrainingArguments(\n    output_dir=output_dir,                    # directory to save and repository id\n    num_train_epochs=1,                       # number of training epochs\n    per_device_train_batch_size=1,            # batch size per device during training\n    gradient_accumulation_steps=8,            # number of steps before performing a backward/update pass\n    gradient_checkpointing=True,              # use gradient checkpointing to save memory\n    optim=\"paged_adamw_32bit\",\n    save_steps=0,\n    logging_steps=25,                         # log every 10 steps\n    learning_rate=2e-4,                       # learning rate, based on QLoRA paper\n    weight_decay=0.001,\n    fp16=True,\n    bf16=False,\n    max_grad_norm=0.3,                        # max gradient norm based on QLoRA paper\n    max_steps=-1,                             # max step as -1 to use all epochs\n    warmup_ratio=0.03,                        # warmup ratio based on QLoRA paper\n    group_by_length=True,\n    lr_scheduler_type=\"cosine\",               # use cosine learning rate scheduler\n#     report_to=\"tensorboard\",                  # report metrics to tensorboard\n    evaluation_strategy=\"epoch\",              # save checkpoint every epoch\n    label_names=[\"label\"]  # ✅ Explicitly set label names\n)\n\ntrainer = SFTTrainer(\n    model=model,\n    args=training_arguments,\n    train_dataset=train_data,\n    eval_dataset=eval_data,\n    peft_config=peft_config,\n    tokenizer=tokenizer,\n    \n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:36:39.981809Z","iopub.execute_input":"2025-02-18T09:36:39.982125Z","iopub.status.idle":"2025-02-18T09:36:42.717247Z","shell.execute_reply.started":"2025-02-18T09:36:39.982099Z","shell.execute_reply":"2025-02-18T09:36:42.716611Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Applying chat template to train dataset:   0%|          | 0/800 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e54c35f738144a6da39c3bd9bdf63495"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Tokenizing train dataset:   0%|          | 0/800 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c1c78c7e637d49f1ac3bbf8e7cc87993"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Tokenizing train dataset:   0%|          | 0/800 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"75de45802a6548a5bf1340af057f626c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Applying chat template to eval dataset:   0%|          | 0/200 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ebe1abfe401344289366d8ecb973b096"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Tokenizing eval dataset:   0%|          | 0/200 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8f1c3b3f7acd4e9ca6be66e3498fc907"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Tokenizing eval dataset:   0%|          | 0/200 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"17b9ba5c0e8e4a7086bd11921b4d3cda"}},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"trainer.train()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T09:36:44.200372Z","iopub.execute_input":"2025-02-18T09:36:44.200683Z"}},"outputs":[{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m The `run_name` is currently set to the same value as `TrainingArguments.output_dir`. If this was not intended, please specify a different run name by setting the `TrainingArguments.run_name` parameter.\n\u001b[34m\u001b[1mwandb\u001b[0m: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"\n        window._wandbApiKey = new Promise((resolve, reject) => {\n            function loadScript(url) {\n            return new Promise(function(resolve, reject) {\n                let newScript = document.createElement(\"script\");\n                newScript.onerror = reject;\n                newScript.onload = resolve;\n                document.body.appendChild(newScript);\n                newScript.src = url;\n            });\n            }\n            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n            const iframe = document.createElement('iframe')\n            iframe.style.cssText = \"width:0;height:0;border:none\"\n            document.body.appendChild(iframe)\n            const handshake = new Postmate({\n                container: iframe,\n                url: 'https://wandb.ai/authorize'\n            });\n            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n            handshake.then(function(child) {\n                child.on('authorize', data => {\n                    clearTimeout(timeout)\n                    resolve(data)\n                });\n            });\n            })\n        });\n    "},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":"# Save trained model and tokenizer\ntrainer.save_model()\ntokenizer.save_pretrained(output_dir)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import gc\n\ndel [\n    model, \n     tokenizer, \n     peft_config, \n    trainer, \n    train_data, \n    eval_data, \n    bnb_config, \n    training_arguments\n]\n# del [df, X_train, X_eval]\ndel [\n    TrainingArguments, \n    SFTTrainer, \n    LoraConfig, \n    BitsAndBytesConfig\n]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for _ in range(100):\n    torch.cuda.empty_cache()\n    gc.collect()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from transformers import (AutoConfig,\n                          AutoModelForCausalLM, \n                          AutoTokenizer,\n                          LlamaForCausalLM, \n                          LlamaTokenizer,\n                          BitsAndBytesConfig, \n                          TrainingArguments, \n                          pipeline, \n                          logging)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Check if GPU is available\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# Specify model name and path\nmodel_name = \"/kaggle/input/llama-3.1/transformers/8b-instruct/2\"\npeft_model_id = \"/kaggle/working/trained_weigths\"\n# peft_model_id = \"/kaggle/input/sentiment-analysis-with-llama-3-1/trained_weigths\"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Set computation dtype\ncompute_dtype = getattr(torch, \"float16\")\n\n# Configure bits and bytes\nbnb_config = BitsAndBytesConfig(\n    load_in_4bit=True,\n    bnb_4bit_use_double_quant=False,\n    bnb_4bit_quant_type=\"nf4\",\n    bnb_4bit_compute_dtype=compute_dtype,\n    llm_int8_enable_fp32_cpu_offload=True\n)\n\n# Load the base model with CPU offloading\nmodel = AutoModelForCausalLM.from_pretrained(\n    model_name,\n    device_map=\"auto\",\n    quantization_config=bnb_config\n)\n\n# Load tokenizer\ntokenizer = AutoTokenizer.from_pretrained(model_name, \n                                          trust_remote_code=True,\n                                         )\ntokenizer.pad_token = tokenizer.eos_token\ntokenizer.padding_side = \"right\"\n\nmodel, tokenizer = setup_chat_format(model, tokenizer)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(len(tokenizer))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load the PEFT adapter\nmodel.load_adapter(peft_model_id)\n\n# Configure model settings\nmodel.config.use_cache = False\nmodel.config.pretraining_tp = 1\n\n# Ensure the model is in evaluation mode\nmodel.eval()\n\nprint(\"Model and tokenizer loaded successfully.\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_pred_final = predict(X_test, model, tokenizer)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predicted = pd.DataFrame({'ID': np.arange(1,len(y_pred_final)+1), 'label': y_pred_final })\npredicted.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}